// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  twitterId       String    @unique
  twitterHandle   String    @unique
  name            String
  profileImage    String?
  bio             String?
  walletAddress   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  createdGroups   Group[]   @relation("GroupCreator")
  groupMembers    GroupMember[]
  messages        Message[]
  announcements   Announcement[]
  
  @@map("users")
}

model Group {
  id              String    @id @default(cuid())
  name            String
  profileImage    String?
  contractAddress String?   // Token gating contract
  creatorId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User      @relation("GroupCreator", fields: [creatorId], references: [id])
  members         GroupMember[]
  messages        Message[]
  announcements   Announcement[]
  
  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  
  @@unique([userId, groupId])
  @@map("group_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  
  @@map("messages")
}

model Announcement {
  id        String   @id @default(cuid())
  messageId String   @unique
  content   String
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  
  @@map("announcements")
}

model PushSubscription {
  id          String @id @default(cuid())
  userId      String
  endpoint    String
  p256dh      String
  auth        String
  createdAt   DateTime @default(now())
  
  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}
